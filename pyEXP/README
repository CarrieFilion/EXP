------------------------------
pyEXP: Python bindings for EXP
------------------------------

These bindings provide the 'standalone' EXP classes defined in the
coefs directory as Python classes.  See the README in EXP/coefs for a
detailed description of the classes.

This directory contains a number of sample Python scripts as follows:

* sample_part1.py--This script construct the basis for the dark halo
  using the Better parameter, reads particle snapshots and computes
  coefficient files for the Better EXP example run.  The coefficients
  are then saved HDF5 format.  I demonstrate using FieldGenerator to
  construct some surface maps of potential and force fields.  Finally,
  we try some brief MSSA computations.  But the main goal of this
  script is computing the coefficients and storing them in a HDF5
  file.

* sample_part2.py--Rereads the previously saved coefficient file and
  does some more analysis, emulating a typical workflow.  In this
  case, I demonstrate Pyploting some of the surfaces fields and MSSA
  eigenvalues and PCs.

* sample_better_example.py--This one begins with an EXP coefficient
  file and also demonstrates visualizing the fields from the dominant
  PCs produced by MSSA.

* sample_basis.py--Plots a few basis functions from the spherical and
  cylindrical bases from the Better example.

* make_histo.py/make_histo_MPI.py--Uses a particle reader to compute a
  two-dimensional histogram image for x-y, x-z, and y-z projections.
  Creates a Python pickle db of the images for all times represented
  in the reader snapshot collection.

* read_histo.py--Reads the Python pickle db for the histograms and
  make images uing imshow

Some implementation notes:

* pyEXP returns row-major matrices while numpy uses col-major matrices
  (for Matilab compatbility?).  So you may need
  np.ndarray.transpose().   See examples.

* Many of the algorithms use OpenMP.  OpenMP functions should
  work without intervention.  Although the user may want to set a
  default OMP_NUM_THREADS environment variable appropriate for their
  machine.

* Many of the algorithms were written using MPI.  Launching an MPI run
  from Python or Jupyter is possible but will take a bit of
  customization and setup.  I have not yet explored this in an any
  detail.  The MPI-aware member functions will fall back to scalar
  computation by initializing MPI with 1 node.

* The pyEXP shared object library, callable from Python, will be
  copied to the user's target install directory using the path:
  lib/pythonX.Y/site-packages where X.Y is your default Python
  version.  In Ubuntu, the default PYTHONPATH includes
  ~/.local/lib/pythonX.Y/site-packages.  So setting your target
  install directory to be /home/user/.local would make sense.
  However, you can choose any target install directory you wish and
  add that to your own PYTHONPATH as you see fit.  You will also need
  to make sure that your LD_LIBRARY_PATH contains the target install
  lib directory or the loader will not be able to find the EXP objects.
  This will result in messages about unresolved symbols.

