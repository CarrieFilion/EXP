------------------------------
pyEXP: Python bindings for EXP
------------------------------

These bindings provide the 'standalone' EXP classes defined in the
coefs directory as Python classes.  See the README in EXP/coefs for a
detailed description of the classes.

SOME IMPLEMENTATION NOTES

* pyEXP returns row-major matrices while numpy uses col-major matrices
  (for Matilab compatbility?).  So you may need
  np.ndarray.transpose().   See examples.

* Many of the algorithms use OpenMP.  OpenMP functions should
  work without intervention.  Although the user may want to set a
  default OMP_NUM_THREADS environment variable appropriate for their
  machine.

* Many of the algorithms were written using MPI.  Launching an MPI run
  from Python or Jupyter is possible but will take a bit of
  customization and setup.  I have not yet explored this in an any
  detail.  The MPI-aware member functions will fall back to scalar
  computation by initializing MPI with 1 node.

* The pyEXP shared object library, callable from Python, will be
  copied to the user's target install directory using the path:
  lib/pythonX.Y/site-packages where X.Y is your default Python
  version.  In Ubuntu, the default PYTHONPATH includes
  ~/.local/lib/pythonX.Y/site-packages.  So setting your target
  install directory to be /home/user/.local would make sense.
  However, you can choose any target install directory you wish and
  add that to your own PYTHONPATH as you see fit.  You will also need
  to make sure that your LD_LIBRARY_PATH contains the target install
  lib directory or the loader will not be able to find the EXP objects.
  This will result in messages about unresolved symbols.

PYTHON SCRIPT EXAMPLES
----------------------

This directory contains a number of sample Python scripts.  Note: you
will need to change the working directory and adjust the named files
to fit your needs.  A number of these cases start using the output
from the EXP 'Better' example.

Some brief descriptions of the included scripts follow...

* sample_part1.py--This script construct the basis for the dark halo
  using the Better parameter, reads particle snapshots and computes
  coefficient files for the Better EXP example run.  The coefficients
  are then saved HDF5 format.  I demonstrate using FieldGenerator to
  construct some surface maps of potential and force fields.  Finally,
  we try some brief MSSA computations.  But the main goal of this
  script is computing the coefficients and storing them in a HDF5
  file.

* sample_part2.py--Rereads the previously saved coefficient file and
  does some more analysis, emulating a typical workflow.  In this
  case, I demonstrate Pyploting some of the surfaces fields and MSSA
  eigenvalues and PCs.

* sample_better_example.py--This one begins with an EXP coefficient
  file and also demonstrates visualizing the fields from the dominant
  PCs produced by MSSA.

* sample_basis.py--Plots a few basis functions from the spherical and
  cylindrical bases from the Better example.

* make_histo.py/make_histo_MPI.py--Uses a particle reader to compute a
  two-dimensional histogram image for x-y, x-z, and y-z projections.
  Creates a Python pickle db of the images for all times represented
  in the reader snapshot collection.

* read_histo.py--Reads the Python pickle db for the histograms and
  make images uing imshow

* grav_power.py--Plots the amplitude (square root of the gravitational
  power) for each harmonic order (l orders for spherical and m orders
  for cylindrical). This routine is meant to be callable rather than
  importable.  This demonstrates a useful strategy for easily
  repeating a commonly used pyEXP workflow on different data.

* table_to_coefs.py--An example of creating TableData.  Here, we create
  a table from the phase space.  Not terribly useful scientifically as is
  but this could be extended through reads of multiple snap shots to pack
  phase space as a function of time, for example.

* orthoCheckDisk--Python program that reads a Cylindrical cache file
  and checks the scalar product of the density and potential function
  pairs for each harmonic index.  I have also provided a script
  version: orthCheckDisk.py.

* orthoCheckHalo--Reads a spherical model file, constructs the
  Sturm-Liouville asis, and checks the scalar product of the density
  and potential function pairs for each harmonic index.  I have also
  provided a script version: orthCheckHalo.py.

* viewSphBasis--Reads a spherical model file, constructs the
  Sturm-Liouville asis, and prints the first 8 potential functions for
  each order.

* viewCylBasis--Reads a Cylindrical cache file and the potential
  functions for each order.

NOTEBOOK EXAMPLES
-----------------

Many of the Python scripts above have Jupyter notebook counterparts.
In addition, the following notebooks some additional features:

* plot_coefs.ipynb--A simple example of reading and plotting
  coefficient data in time.

* cosine_single_channel.ipynb/cosine_multichannel.ipynb--Make some
  test data and analyze the newly created series with SSA and MSSA.
  