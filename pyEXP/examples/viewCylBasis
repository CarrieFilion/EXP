#!/usr/bin/env python3

"""
Plot the cylindrical basis functions
"""

import os, sys, getopt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib import gridspec
import pyEXP

def help(phrase: str) -> None:
   """Print some usage info"""
   print(phrase)

def plot_im(array=None, ind=0):
    """A function to plot the image given a images matrix, type of the matrix: \
    either original or fool, and the order of images in the matrix"""
    img_reshaped = array[ind, :].reshape((28, 28))
    imgplot = plt.imshow(img_reshaped)

def main(prog, argv) -> int:
   """
   Plot the cylindrical basis functions
   """

   cfile = ''
   dir   = ''

   phrase = prog + ': [-h] -c|--cache=file [-d|--dir cache_directory]';

   try:
      opts, args = getopt.getopt(argv,"hc:d:",["cache=","dir="])
   except getopt.GetoptError:
      help(phrase)
      sys.exit(2)

   for opt, arg in opts:
      if opt == '-h':
         help(phrase)
         sys.exit()
      elif opt in ("-d", "--dir"):
         dir = arg
      elif opt in ("-c", "--cache"):
         cfile = arg

   # Check for directory
   if len(dir):
      os.chdir(dir)

   # Get the cache data
   #
   params = pyEXP.basis.Cylindrical.cacheInfo(cfile)

   Mmax = int(params['mmax'])

   bconfig = """
---
id: cylinder
parameters:
  acyl: {}
  hcyl: {}
  mmax: {}
  nmax: {}
  ncylorder: {}
  ncylnx: {}
  ncylny: {}
  eof_file: {}
...
""".format(params['ascl'], params['hscl'], params['mmax'], params['nmax'],
           params['norder'], params['numx'], params['numy'], cfile)
   
   # Construct the basis instance
   #
   basis = pyEXP.basis.Basis.factory(bconfig)

   Norder = int(params['norder'])

   # Plot the matrices as images with a greyscale color map
   #
   ncol  = 4                   # Rows with 4 columns
   nrow  = int(Norder/ncol)
    
   if ncol*nrow <= Norder: nrow += 1

   Rmin = 0.0
   Rmax = 0.1
   Rnum = 100
   Zmin = -0.03
   Zmax =  0.03
   Znum = 40

   R = np.linspace(Rmin, Rmax, Rnum)
   Z = np.linspace(Zmin, Zmax, Znum)

   xv, yv = np.meshgrid(R, Z)

   grid = basis.getBasis(Rmin, Rmax, Rnum, Zmin, Zmax, Znum)

   for m in range(Mmax+1):
      n = 0
      fig = plt.figure(figsize=(15, 15)) 
      gs = gridspec.GridSpec(nrow, ncol, width_ratios=[1, 1, 1, 1]) 

      for row in range(nrow):
         for col in range(ncol):
            if n<Norder:
               ax = plt.subplot(gs[n])
               plt.axis('off')
               cx = plt.contourf(xv, yv, grid[m][n].transpose())
               n += 1

      plt.annotate("m={}".format(m), (0.5, 0.95), xycoords='figure fraction')
      plt.tight_layout()
      plt.show()

if __name__ == "__main__":
   main(sys.argv[0], sys.argv[1:])
