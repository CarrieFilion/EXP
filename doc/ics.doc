/*! \page ics Initial condition programs

You will find three versions of the <code>gendisk</code>:
<ul>
<li> <code>gendisk</code> is the original implementation, kept around for backwards compatibility but fully replaced by
<li> <code>gendisk2</code>, which most up-to-date tuned and debugged version (<em>so you probably want to use this one!</em>)
<li> <code>gendisk3</code> explores a combined Eddington inversion + quadratic programming distribution function generation.  This should only be used if you rsearching the properties of distribution functions.
</ul>

<h2> Algorithm summary </h2>

The <code>gendisk2</code> will generate dark matter, star and gas
particles.The phase-space generation algorithm is as follows:
<ol>

<li> The disk model (specified by scale length, scale height, and
mass) is deprojected and added to the halo model (which is specified
as a table and may contain a bulge component) to define a monopole
solution of the Poisson equation.  See SphericalModelTable for details.
<li> The halo particle distribution function is generated by Eddington
inversion and the desired number of phase-space points are realized as
random variates.
<li> The potential for the realized points is computed using the
specified spherical basis.
<li> The spatial distribution of the disk component is realized.
<li> The potential for the realized points is computed using the
specified cylindrical basis
<li> The cylindrical Jeans' equations are solved in the combined disk
+ halo potential and used to realize the velocities for the disk
component.
<li> The gas component is realized in the combined potential of the
disk and gas.  
</ol>

<h2> Invoking </h2>

\par mpirun -v -np <# of nodes> N gendisk2 -- [options]
	
Generates a spherical phase space with an embedded disk using Jeans'
equations assuming velocity isotropy for the spherical component and
in-plane isotropy for the disk component

Options:
<pre>
  -H num     number of halo particles (1000)
  -D num     number of disk particles (1000)
  -L lmax    spherical harmonic order (4)
  -M mmax    cylindrical harmonic order (4)
  -X lmax    maximum l for cylindrical expansion (26)
  -N nmax    spherical radial order (10)
  -n nmax2   cylindrical radial order (8)
  -Q value   Toomre Q for radial dispersion (1.2)
  -l a       scale length (2.0)
  -Z h       scale height (0.1)
  -m mass    disk mass (1.0)
  -r rsphsl  edge for SL expansion (47.5)
  -R expon   power law divergence exponent (unset)
  -s scale   halo coordinate scale
  -1 rmin    minimum radius for change over to DF
  -2 rmax    maximum radius for change over to DF
  -b         print out basis images (false)
  -z         zero center of mass and velocity (false)
</pre>

This command will read parameters from a script as well.  E.g.

\par mpirun -v -np <# of nodes> N gendisk2 -f script.file

where the script file is a list of <code>key=value</code> pairs.

<h2> Full example </h2>

<h3> Input files </h3>

Halo model %file: <A HREF="../ic_example/SLGridSph.model" type="text"> here</A><br>
Gendisk input %file: <A HREF="../ic_example/gendisk.in" type="text"> here</A><br>
EXP input %file: <A HREF="../ic_example/in.bar" type="text"> here</A><br>
Halo config %file: <A HREF="../ic_example/halo.conf" type="text"> here</A><br>
Disk config %file: <A HREF="../ic_example/disk.conf" type="text"> here</A><br>
PBS input %file: <A HREF="../ic_example/pbs_job" type="text"> here</A><br>

<h3> Command sequence </h3>
<ol>
<li> This makes the ICs:  <code>mpirun -v -np ## gendisk2 -f gendisk.in</code>
<li> This starts the run: <code>qsub -q opteron -l nodes=16:ppn=16 pbs_job</code>
</ol>
The absolute paths in these input %files will have to be changed, of course.

<h3> Sample output </h3>

<IMG ALIGN="LEFT" WIDTH=400 SRC="../ic_example/frame.png" ALT="Face on and edge on view">
<BR><BR>
<A HREF="../ic_example/output.avi">Click here for a movie</A>
<BR>

*/
