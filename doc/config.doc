/*! \page config %Configuration files

The main configuration file identified on the <code>exp</code> command
line using the <code>-f</code> flag. The default parameter file, in
absence of a <code>-f file</code> override, is named
<code>PARAM.yml</code>.

The parameter file is divided into stanzas.  Each stanza begins with a
tag of the form <code>stanza_name</code>.  Each stanza is followed by
lines which contain Key and Value pairs demarcated in standard YAML
syntax by a ':'.  Each stanza is a YAML node and the order of nodes in
the YAML sequence is not significant.  I usually put the
<code>Global</code> stanza first anyhow, but note that YAML emitters are
not required to preserve order.

\par <code>Global:</code>

     This stanza defines basic features of the simulation such as
     name, time step and time step parameters, and working
     directory. Each Key defines a specific parameter value or boolean
     toggle.

\par <code>Components:</code>
     
     This stanza defines the phase-space components with associated
     parameters and force methods.

     Each Key is the mnemonic for a component and each Value is the
     name of file in the working directory which defines the
     component. The mnemonic may contain spaces.  The body file is in
     EXP native formation.  EXP has its own hierarchical phase space
     structure that we call PSP.  EXP provides a number of standalone
     routines to manipulate, visualize and summarize the content of
     PSP files.

\par <code>Output:</code>

     The list of output methods to be run after each step at the user
     specified frequency.

     Each Key defines the type of Output that the code will generate.
     The value is the space delimited list of parameters for the
     Output routine.  You can have as many instances of these as you
     like (there might be occasion reasons to have duplicates).  The
     Key is the class name in lower case.
     
\par <code>External:</code>

     All of the external forces and phase-space manipulations that
     occur in addition to the gravitational fields generated by the
     phase space itself.

     Each entry defines an ExternalForce routine.  Syntax is as for
     Output above: the Key is the name of the type and the value is
     the space delimited parameter list.  The Key is the class name in
     lower case.

\par <code>Interaction:</code>

     This stanza defines the couplings between all of the phase-space
     components.  These may be toggled to explore the influence of the
     various phase-space components on each other.

     Key and Value pairs here define the interactions between
     components.  Think: Key feels Value to get the sense of the
     interaction.  Unfortunately, this means a fully consistent
     simulation requires all pairs of components to be listed.

<h3> List of global parameters </h3>

The <code>Components</code>, <code>External</code> and <code>Output</code> stanzas
(or nodes) are sequences that instruct the containers to build
particular objects.  Full parameter lists for the <code>Component</code>,
<code>Output</code> and <code>ExternalForce</code> classes are listed in the
manpage for each class in the <bf>Classes</bf> tab.

The allowed parameters in the <code>Global</code> stanza are:

Key name                | Value
-------------           | -------------
  <code>nbodmax</code>  | is the maximum number of bodies per process 
  <code>nsteps</code>   | is the maximum number of steps to  execute 
  <code>nthrds</code>   | is the number of threads per process (e.g. one per processor)
  <code>nbalance</code> | is the number of steps between load balancing (use 0 for none) 
  <code>dbthresh</code> | is the load balancing threshold (larger difference initiates balancing)
  <code>tnow</code>     | is the current time 
  <code>dtime</code>    | is the timestep
  <code>PFbufsz</code>  | is the particle ferry buffer size
  <code>NICE</code>     | is the process priority
  <code>VERBOSE</code>  | is the output logging level
  <code>multistep</code> | is the number of time step levels
  <code>maxlev</code>    | is the maximum level for expansion interpolation (default: 100)
  <code>ctrlev</code>    | is the maximum level for center determination (default: 0)
  <code>dynfracV</code>  | is the time step velocity coefficient (default: 0.01)
  <code>dynfracA</code>  | is the time step accelration coefficient (default: 0.03)
  <code>use\_cwd</code>  | uses the Node 0 home dir for the working dir on all nodes
  <code>posnsync</code>  | synchronizes multistep positions at each substep (default: true)
  <code>eqmotion</code>  | toggles phase space advance (e.g. for use with externally supplied mapping).  On by default. 
  <code>global\_cov</code> | resets total center of velocity to zero if true 
  <code>restart</code>     | global set on restart (to used by initializers and user modules)
  <code>homedir</code>   | is the home directory for configuration files, etc.
  <code>ldlibdir</code>  | is the directory containing loadable modules
  <code>infile</code>    | is the input file for restart
  <code>parmfile</code>  | is the parameter dump file
  <code>ratefile</code>  | is the initial processor rate file
  <code>outdir</code>    | is the directory for output
  <code>runtag</code>    | is a suffix or prefix used for labeling report files


<h3>Example</h3>

Here is a documented example of an EXP configuration file that
explains some of the details.  The <code>Global</code> node is the
easiest: it is just a list of key, value pairs.

The <code>Components</code> node is a sequence.  Each element in the
sequence will be a new node and begins with a '-'.  Each component has
four internal nodes as described in the comments below.  Similarly for
the <code>Output</code> and <code>External</code> nodes.  Each new
entry starts with '-' and has two nodes: an 'id: classtype' where
'classtype' is the name of the force or output and 'parameters: {}'
where '{}' contains the sequence of key, value pairs. The
<code>Interaction</code> node is a list of name1, name2 pairs that the
describe the interaction between components by name.

~~~~~~~~~~~~~~~~~~~~
# YAML 1.2
# See: http://yaml.org for more info.  EXP uses the
# yaml-cpp library (http://github.com/jbeder/yaml-cpp)
# for parsing and emitting YAML
#
# ------------------------------------------------------
# These parameters control the simulation
# ------------------------------------------------------
Global:
  outdir     : /home/weinberg/Nbody/DiskHaloExample
  nbodmax    : 100000
  nthrds     : 1
  dtime      : 0.05
  ldlibdir   : /home/weinberg/lib/user
  runtag     : run1
  nsteps     : 5
  multistep  : 10
  infile     : OUT.run1.chkpt

# ------------------------------------------------------
# This is a sequence of components. 
#
# Each component file should contain four fields 
# deliminated by ':' characters.
#
# The first is the Force name.  The parameters for
# the force are included as a parameter map.
#
# The second is the list of parameters that that will 
# be passed to the Component on creation.
#
# The third is the name of the bodies file (in ascii).
#
# The fourth is the force name or id and list of
# parameters that will be passed to the Force.
#
# Each indented stanza beginning with '-' is a component
# ------------------------------------------------------
Components:
  - name       : dark halo
    parameters : {nlevel: 1, indexing: true, EJ: 2,
                  nEJkeep: 256, EJdryrun: true}
    bodyfile   : halo.bod
    force :
      id : sphereSL
      parameters : {rmax : 27.5}

  - name       : star disk
    parameters : {nlevel: 1, indexing: true, EJ: 2,
                  nEJkeep: 256, EJdryrun: true}
    bodyfile   : disk.bod
    force :
      id : cylinder
      parameters : {acyl: 1.0, nmax: 32, mmax: 2,
                    hcyl: 0.05, ncylorder: 24,
                    pca: true, hallfreq: 10,
                    pcavtk: true}
#
# The parameters could be expressed like this,
# equivalently:
#
#       parameters :
#         acyl : 1.0
#         nmax : 32
#         mmax : 2
#         hcyl : 0.05
#         pca  : true
#         ncylorder : 24
#         hallfreq : 10
#         pcavtk : true

# ------------------------------------------------------
# This is a sequence of outputs
# ------------------------------------------------------
Output:
  - id : outlog
    parameters : {nint : 10}
  - id : outps
    parameters : {nint : 5}
  - id : outpsp
    parameters : {nint : 1, timer : true}

# ------------------------------------------------------
# This is a sequence of external forces
# This can be empty (or missing)
# ------------------------------------------------------
External:

# Currently empty

# ------------------------------------------------------
# List of interations as name1 : name2 map entries
# This can be empty (or missing)
# ------------------------------------------------------
Interaction:
  dark halo : star disk
  star disk : dark halo
  
...
~~~~~~~~~~~~~~~~~~~~

*/
