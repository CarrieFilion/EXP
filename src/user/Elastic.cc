#include <Elastic.H>

#include <boost/assign/list_of.hpp>

using namespace boost::assign; // bring 'operator+=()' into scope

// Total cross section from Malik & Trefftz, 1960, Zeitschrift fur Astrophysik, 50, 96-109

const Elastic::InterpPair Hydrogen = boost::assign::map_list_of
  (0.66356077923727,    0.25392686712509)
  (0.66576762346358,    0.25959940190621)
  (0.71282701193426,    0.24859039132138)
  (0.73590227585419,    0.2419175972279 )
  (0.75936666273882,    0.23624594218232)
  (0.80889140369906,    0.23157630592019)
  (0.83209592175062,    0.2252369315975 )
  (0.90677351672548,    0.21923361625222)
  (0.95590913472103,    0.21356196120664)
  (1.031106467362,      0.20889320468006)
  (1.05457085424663,    0.20322154963448)
  (1.10409559520687,    0.19855103363681)
  (1.17903305901478,    0.19321455783311)
  (1.22881766880808,    0.1892126408481 )
  (1.2782131556367,     0.18420870507965)
  (1.35379961124236,    0.18054020786543)
  (1.45506137966837,    0.17687259038675)
  (1.58185287994542,    0.17287155313729)
  (1.75999228472356,    0.16887227535892)
  (1.91233528596856,    0.16453869807421)
  (2.06519530374007,    0.1615396796082 )
  (2.24360682247953,    0.1582072413714 )
  (2.42186867854026,    0.15454138336381)
  (2.60026659158166,    0.15120894512701)
  (2.77893661858437,    0.14854422616733)
  (2.9830084838763,     0.14521266766607)
  (3.21287675270137,    0.14221540867115)
  (3.39141072272342,    0.13921726994068)
  (3.64683049251644,    0.13588659117497)
  (3.87695726960477,    0.13355705145716)
  (4.0810291348967,     0.1302254929559 )
  (4.31091100941984,    0.12722823396098)
  (4.54091533522557,    0.12456439473684)
  (4.71957175653021,    0.12189967577716)
  (4.97525003458648,    0.11923671628857)
  (5.28200410318252,    0.11590779699394)
  (5.53768238123879,    0.11324483750535)
  (5.74227126305723,    0.11124783782279)
  (5.97267015410688,    0.10958513764656)
  (6.15132657541152,    0.10692041868688)
  (6.40726336173105,    0.10492429873987)
  (6.61198830053015,    0.10326159856364)
  (6.81683569061185,    0.10193143842266)
  (6.99562816889715,    0.09960013923376)
  (7.20035310769626,    0.09793743905754)
  (7.43061594176524,    0.09594131911052)
  (7.71209062335465,    0.09361265912826)
  (7.96789135269351,    0.09128311941045)
  (8.27517604351412,    0.08928875893452)
  (8.50530282060245,    0.08695869137539)
  (8.76123960692198,    0.0849630992697 )
  (9.06852429774258,    0.08296865082022)
  (9.35012143061459,    0.08097367452941)
  (9.55484636941369,    0.07931044651185)
  (9.78536771174593,    0.07798143002708)
  (10.0157666027956,    0.0763188178244 )
  (10.2717033891151,    0.07432313774516)
  (10.5533005219871,    0.07232816145435)
  (10.8349112605572,    0.07033309718998)
  (11.1421823456797,    0.06833873671405)
  (11.4237930842498,    0.06634376042324)
  (11.6798523218519,    0.06468176403545)
  (11.9615991174026,    0.06302038346253)
  (12.2176583550047,    0.06135838707474)
  (12.4223832938038,    0.05969515905719)
  (12.7041164836565,    0.05803377848427)
  (12.9858496735092,    0.05637239791136)
  (13.2163710158414,    0.05504346940014)
  (13.4212320116212,    0.05371383710048)
  (13.600541506433 ,    0.0527172726774 );

// Total cross section from LaBahn & Callaway, 1966, Phys. Rev., 147, 50, 96-109

const Elastic::InterpPair Helium = boost::assign::map_list_of
  (0.0972135,     0.05551145377263)
  (0.212908,      0.05822296993718)
  (0.251768,      0.05940189000873)
  (0.440878,      0.06046375815868)
  (0.704798,      0.06117279037273)
  (1.11846,       0.06129348266509)
  (1.5694,        0.06112014501087)
  (1.86971,       0.06070962319973)
  (2.20762,       0.06029966144564)
  (2.50774,       0.05971244163803)
  (2.77027,       0.0591249418019 )
  (3.07045,       0.05859680801213)
  (3.25779,       0.05800874811896)
  (3.44532,       0.05759766625078)
  (3.78297,       0.05695164045386)
  (4.0079,        0.05636414061773)
  (4.2329,        0.05583516674239)
  (4.57055,       0.05518942097399)
  (4.79555,       0.05466072712718)
  (5.02048,       0.05407294726253)
  (5.20782,       0.05348516739788)
  (5.50788,       0.05283886157243)
  (5.883,         0.0520755038254 )
  (6.14552,       0.05148800398927)
  (6.48318,       0.05084225822086)
  (6.89576,       0.04996128849519)
  (7.27088,       0.04919793074815)
  (7.68347,       0.04831696102248)
  (7.98353,       0.04767065519703)
  (8.32118,       0.04702490942863)
  (8.6963,        0.04626155168159)
  (8.99617,       0.04543854785967)
  (9.33408,       0.04502858610558)
  (9.67173,       0.04438256030865)
  (9.97191,       0.04385442651888)
  (10.2346,       0.04338481868991)
  (10.4596,       0.0428561248431 )
  (10.7222,       0.04238651701412)
  (10.9849,       0.04197599520298)
  (11.2852,       0.04150666740253)
  (11.5478,       0.04103705957356)
  (11.773,        0.04062597770538)
  (12.0731,       0.04003903792629)
  (12.3734,       0.03962851611515)
  (12.7488,       0.03910094238242)
  (13.0489,       0.03857252856413)
  (13.3867,       0.03798558878505)
  (13.7996,       0.03739948909152)
  (14.1375,       0.0369892473089 )
  (14.4752,       0.03646139354765)
  (14.8132,       0.03611023778288)
  (15.1509,       0.03552329800379)
  (15.4889,       0.03517214223901)
  (15.7893,       0.03482070644571)
  (16.1271,       0.03435165867378)
  (16.465,        0.03388261090184)
  (16.8404,       0.03341384315843)
  (17.1407,       0.03300332134729)
  (17.5162,       0.03259363962172)
  (17.8917,       0.03218367786762)
  (18.2672,       0.03177371611353)
  (18.6426,       0.03130494837012)
  (19.0181,       0.03089526664454)
  (19.3561,       0.03054411087976)
  (19.6941,       0.03019295511498)
  (20.0321,       0.02984151932168)
  (20.3324,       0.02949008352839)
  (20.708,        0.02913920779213)
  (21.046,        0.02878805202735)
  (21.3839,       0.02837809027325)
  (21.7594,       0.02796815652201)
  (22.1725,       0.02755855880499)
  (22.548,        0.02720765506588)
  (22.9612,       0.02685700335244)
  (23.3369,       0.02662393561478)
  (23.5995,       0.02615438379151)
  (23.9752,       0.02592131605385)
  (24.3506,       0.02539363030971)
  (24.8389,       0.02504351065046)
  (25.2144,       0.02463366090777)
  (25.8906,       0.02416702138112)
  (26.3788,       0.02369903771756)
  (26.7543,       0.02328918797487)
  (27.2427,       0.02293906831562)
  (27.7686,       0.02258922868489)
  (28.2944,       0.022121497047  )
  (28.8205,       0.02188952142057)
  (29.2337,       0.02153886970713)
  (29.8723,       0.02113086815268)
  (30.3607,       0.02078074849343)
  (30.8868,       0.02060769086772)
  (31.4127,       0.02025785123699)
  (31.9388,       0.02002584760771)
  (32.615,        0.01955920808105)
  (33.3665,       0.01921093661004)
  (34.0429,       0.01892107908841)
  (34.6064,       0.01857149148334)
  (35.0948,       0.01828031782767)
  (35.5457,       0.0180477821442 )
  (36.0342,       0.01787444448997)
  (36.4851,       0.01764193680936)
  (37.0112,       0.0174688511808 )
  (37.5372,       0.01717792955079)
  (38.0258,       0.01700461989942)
  (38.5519,       0.01683153427086)
  (38.9277,       0.01665741253678)
  (39.4537,       0.0164254089075 )
  (39.9423,       0.01625209925613)
  (40.506,        0.01607929365609)
  (40.9569,       0.01584675797262)
  (41.483,        0.01567370034692)
  (41.9715,       0.01550036269269)
  (42.3472,       0.01526732295788)
  (42.7606,       0.0151523712502 )
  (43.174,        0.01503744754536)
  (43.5498,       0.01486332581128)
  (43.9631,       0.01468945610286)
  (44.339,        0.01457425236951)
  (44.6772,       0.01445879661048)
  (45.2033,       0.01428571098192)
  (45.504,        0.01422892119795)
  (45.8798,       0.0141137174646 )
  (46.2556,       0.01399851373124)
  (46.5939,       0.01388305797221)
  (46.857,        0.01382598815972)
  (47.1952,       0.0137105324007 )
  (47.571,        0.01359532866734)
  (47.8717,       0.01353851088052)
  (48.1348,       0.01348144106803)
  (48.4354,       0.01336573328334)
  (48.7736,       0.01325024952146)
  (49.0368,       0.01325212571255)
  (49.2622,       0.01313585787081)
  (49.5254,       0.01313770605905)
  (49.7885,       0.01308063624656)
  (49.9763,       0.01290519837843);

Elastic::Elastic()
{
  atomicdata[1] = Hydrogen;
  atomicdata[2] = Helium;
}

double Elastic::interpolate(const std::map<double, double> &data,
			    double x)
{
  typedef std::map<double, double>::const_iterator i_t;

  i_t i=data.upper_bound(x);

  if (i==data.end()) {
    return (--i)->second;
  }

  if (i==data.begin())
    {
    return i->second;
  }

  i_t l=i; --l;

  const double delta=(x- l->first)/(i->first - l->first);
  return delta*i->second +(1-delta)*l->second;
}

