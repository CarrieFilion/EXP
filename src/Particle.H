#ifndef Particle_H
#define Particle_H

#include <unordered_map>
#include <vector>

// Boost shared pointer implementation
//
#include <boost/shared_ptr.hpp>
#include <boost/make_shared.hpp>

using namespace std;

//! Keeps track of all info for one particle
/*!
  The iattrib and dattrib vectors are used by individual components to
  carry additional parameters specific to different particle types.
 */
class Particle
{
private:

  //! MPI buffer
  std::vector<char> buffer;

public:

  //! Default effort value
  static float effort_default;

  //! Mass of particle
  double mass;

  //! Position vector
  double pos[3];

  //! Velocity vector
  double vel[3];

  //! Acceleration vector
  double acc[3];

  //! Gravitational potential due to particles  
  double pot;

  //! Gravitational potential from external forces
  double potext;
  
  //! Integer attributes
  vector<int> iattrib;

  //! Real (double) attributes
  vector<double> dattrib;

  //! Multistep level
  unsigned level;

  //! Internal process time step (<0 means ignore)
  float dtreq;

  //! Internal size scale (<0 means ignore)
  float scale;

  //! Scale factor for partitioning work
  float effort;

  //! Index for ordering
  unsigned long indx;

  //! Tree key
  unsigned tree;

  //! Hash key
  unsigned long key;
  
  typedef std::pair<unsigned short, unsigned short> speciesKey;
  static const speciesKey defaultKey;

  //! Species key (this is a cache value to prevent endless on-the-fly
  //! reconstruction of the species key)
  speciesKey skey;

  //! Constructor
  Particle();

  //! Constructor with presized attribute lists
  Particle(unsigned niatr, unsigned ndatr);

  //! Copy constructor
  Particle(const Particle &);

  //! Read particles from file
  void readAscii(bool indexing, int seq, std::istream* fin);

  //! Read particles from file 
  void readBinary(unsigned rsize, bool indexing, int seq, std::istream *in);

  //! Write a particle in ascii format
  void writeAscii(bool indexing, bool accel, std::ostream* out);

  //! Write a particle in binary format (PSP)
  void writeBinary(unsigned rsize, bool indexing, std::ostream *out) const;

  //! Write a particle in binary format (PSP) to buffer for MPI
  int writeBinaryMPI(char* buf, unsigned rsize, bool indexing);
  
  //! Particle buffer size
  unsigned getMPIBufSize(unsigned rsize, bool indexing)
  {
    unsigned csize = (8 + dattrib.size()) * rsize + iattrib.size() * sizeof(int);
    if (indexing) csize += sizeof(unsigned long);
    return csize;
  }
};

typedef boost::shared_ptr<Particle> PartPtr;
typedef std::unordered_map<unsigned long, PartPtr> PartMap;
typedef std::unordered_map<unsigned long, PartPtr>::iterator PartMapItr;
typedef std::pair<unsigned long, PartPtr> PMapType;
std::ostream& operator<< (std::ostream& os, const PMapType& p);

#endif
