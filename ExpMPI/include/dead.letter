To: schloerb.fcrao1
Subject: numerical.h

/* 
	some simple macros
*/

#define MAX(bob, joe) (((bob) > (joe)) ? (bob) : (joe))
#define MIN(bob, joe) (((bob) < (joe)) ? (bob) : (joe))
#define FLOAT(bob)  ((float) (bob))
#define DOUBLE(bob) ((double) (bob))
#define SQR(bob) ((bob)*(bob))
#define Pi 3.141592653589793
#define TINY 1.e-10
#define Sign(bob) (((bob)>0) ? (1.0) : (-1.0))

/*
	other names for common functions, compatible with Mathematica
*/

#define Sin sin
#define Cos cos
#define Tan tan
#define ArcTan atan
#define ArcSin asin
#define ArcCos acos
#define Exp exp
#define Power pow
#define Sqrt sqrt
#define Log log
#define Log10 log10
#define Pow10 pow10
#define Sinh sinh
#define Cosh cosh
#define Tanh tanh
#define ArcSinh asinh
#define ArcCosh acosh
#define ArcTanh atanh
#define ArcTanXY arctanxy

#define nrvector vector
#define nrmatrix matrix
#define free_nrvector free_vector
#define free_nrmatrix free_matrix


/* 
	declarations of non-standard functions
*/

/* rounding functions */

#ifdef __BORLANDC__
int nint(double);
#endif
double round(double);




/* Borland extensions, not defined in UNIX C */

#ifndef __TURBOC__

double poly(double, int, double *);
double pow10(double);


#endif





/* inverse hyperbolic functions (not defined in Borland C) */

#ifdef __TURBOC__

double asinh(double);
double acosh(double);
double atanh(double);

#endif


double arctanxy(double, double);




/* multiple angle trig functions */

void trigs(double, int, double *, double *);




/* special functions */

double BesselJ(int, double);
double BesselI(int, double);
double BesselK(int, double);
double gammln(double);





/* some numerical recipes utility functions */

double *vector(int, int);
int *ivector(int, int);
double **matrix(int, int, int, int);
void free_vector(double *, int, int);
void free_ivector(int *, int, int);
void free_matrix(double **, int, int, int, int);
void nrerror(char *);
void sort(int, double *);



/* typedefs for 1D functions used in quadrature, minimization, and roots */

typedef double (*func_1d)(double);
typedef double (*func_2d)(double, double);
typedef void (*dfunc_1d)(double, double *, double *);





/* numerical quadrature */

void gauleg(double, double, double *, double *, int);
double qadapt(double, double, func_1d, double);
double qadapt2d(double, double, double, double, func_2d, double);



/* root finding */


double zbrent(func_1d, double, double, double);

double rtbis(func_1d, double, double, double);

double rtsafe(dfunc_1d,  double, double, double);

int zbrac(func_1d, double *, double *);




/* 1D minimization */

double brent(double, double, double, func_1d, double, double *);
void mnbrak(double *, double *, double *, double *, double *, 
	double *, func_1d);



/* random numbers */

void Init_Random (int);
double Random (double, double);
double Gaussian_Variable (double);
void Random_Vector (double, double *x);
double Random_Polar_Angle (double, double);




/* ODE solvers */


/* first, some typedefs for passing function pointers */

	
typedef void (*ode_derivs)(double, double *, double *);

typedef void (*ode_integrator)(double *, double *, int, double *, double, 
	double, double *, double *, double *, ode_derivs);

typedef void (*ode_rk)(double *, double *, int, double, double, 
	double *, ode_derivs);





/* prototypes for ODE solvers */

void integrate_ode(double *, double, double, double *, double, int,
		   ode_derivs, ode_integrator);

void onestep(double *, double *, int, double *, double, 
		ode_derivs, ode_integrator);
	
void rkqc(double *, double *, int , double *, double, double, 
		double *, double *, double *, ode_derivs);
		
void rk2qc (double *, double *, int , double *, double, double, 
		double *, double *, double *, ode_derivs);

void bsstep (double *, double *, int , double *, 
	double, double, double *, double *, double *, ode_derivs);

void constant_step (double *, double *, int, double, ode_derivs, ode_rk);

void rk4(double *, double *, int, double, double, double *, ode_derivs);





/* interpolation stuff */


void locate (double *, int, double, int *);

#ifdef __cplusplus
	class Matrix;
	class Vector;

	Matrix build_cubic_table(Vector &, Vector &, Vector &);
	double cubic_value(Matrix &, Vector &, double, double *);

#endif






/* command line parser utilities */

void init_cmdparse ( int, char **);
char *strarg (char *, int);
int iarg (char *, int);
int cmdflag_set (char *);
double farg (char *, int);















