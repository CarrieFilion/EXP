----------------------------
EXP H5 coefficient utilities
----------------------------

This describes an extensible HDF5 format for EXP coefficients and
provides a few utility classes to manipulate them.  So far these are
only for testing the design.  I have only implemented spherical and
cylindrical coefficients (e.g.) produced by the Sphere and Cylinder.
Any new or current basis types could be easily added.

The main elements of the software design are coefficient objects and a
factory pattern to create them.

The base class 'Coefs' is the main coefficient object.   It implements
the following tasks:
   * to read the native EXP binary format into an internal database
   * to read the HDF5 EXP format into an internal database
   * to allow clients access to the internal database
   * to allow the HDF5 format to be written and extended

At this point, the internal database is a std::map (i.e. a dictionary)
of EXP native coefficient structures.  In the end, I propose making
these mirror the same coefficient object structure as these test
classes. TBD.

The design provides a factory, wrapper class 'CoefFactory' which
implements a factory pattern for reading and writing coefficient
objects of any allowed type.  This factory class also provides wrapper
functions for the main members of the coefficient object (hence the
name 'CoefFactory').  The 'derived' object type (e.g. either spherical
or cylindrical coefficients) is chosen based on the coefficient type
found in the EXP native or HDF5 file.

Currently, there are some example and test utilities:
   * 'nativetoh5': this utility reads a native EXP coefficient file and
     produces an an HDF5 file.  The extensibility can be tested with the
     '-e/--extend' option which appends the stanzas in the native file to the
     an existing HDF5 file.  This is only for testing and has no clear
     practical value at this point.
   * 'h5compare': this reads a native EXP coefficient file and HDF5 coefficient
     file produced by nativetoh5 and compares every value to verify that their
     identity. This routine checks the attributes with the native header
     values as well as the values of the coefficients themselves.
   * 'viewcoefs': reads an EXP coefficient file, native or HDF5, displays
     the available snapshot times, and prints the coefficient matrix at
     user selected times.  This is a check of the coefficient access operator.
   * 'h5compare': reads an EXP coefficient file, native or HDF5, and computes
     the harmonic power per top-level index (e.g. m-order for cylindrical and
     l-order for spherical).


The HDF5 file has the following structure:
   * The top-level group has the following attributes and data:
       + Attribute 'config': this will contain the YAML parameters needed
         to instantiate the EXP basis that generated the coefficients.  This
	 is not yet implemented on the EXP side.
       + Attribute 'type': the coefficient type (currently 'Sphere' or
         'Cylinder')
       + Attribute 'forceID': the EXP string identifier for the force type.
       + Parameters attributes that describe the dimensionality of the basis.
         Any number of these are allowed and should fully describe the
	 parameters necessary to specify the basis.  For the spherical basis,
	 these are lmax, nmax, scale and are illustrated in the schema
	 provided at the end of this README.
       + Dataset 'count': this is a single unsigned integer that records the
         number of snapshots in the coefficient file.  This should be updated
	 if/when the HDF5 file is extended (e.g. by a running EXP simulation)
       + Group 'snapshots': contains all of the coefficient frames.  Each
         frame has a 'Time' attribute (double type) and a coefficient matrix
	 (Eigen::MatrixXcd type)

An example schema for the hierarchical structure of the HDF5 file, 'file.h5'
say, for a spherical basis is:

HDF5 "file.h5" {
FILE_CONTENTS {
 group      /
 attribute  /config
 attribute  /forceID
 attribute  /lmax
 attribute  /nmax
 attribute  /scale
 attribute  /type
 dataset    /count
 group      /snapshots
 group      /snapshots/00000000
 attribute  /snapshots/00000000/Time
 dataset    /snapshots/00000000/coefficients
 group      /snapshots/00000001
 attribute  /snapshots/00000001/Time
 dataset    /snapshots/00000001/coefficients
 group      /snapshots/00000002
 attribute  /snapshots/00000002/Time
 dataset    /snapshots/00000002/coefficients
 .
 .
 .
 group      /snapshots/000count
 attribute  /snapshots/000count/Time
 dataset    /snapshots/000count/coefficients
 }
}
