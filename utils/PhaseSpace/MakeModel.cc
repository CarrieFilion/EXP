#include <iostream>
#include <iomanip>
#include <fstream>
#include <memory>

#include <MakeModel.H>

void Splsum(const Eigen::VectorXd& x, const Eigen::VectorXd& y, Eigen::VectorXd& z);

MakeModel::MakeModel(int N, double Rmin, double Rmax, bool LogR)
{
  logr = LogR;
  if (Rmin<=0.0) logr = false;

  num = N;
  rmin = Rmin;
  rmax = Rmax;
  if (logr) {
    rmin = log(rmin);
    rmax = log(rmax);
  }
  dr = (rmax - rmin)/num;

  
  r  = Eigen::VectorXd::Zero(num+1);
  d  = Eigen::VectorXd::Zero(num+1);
  m  = Eigen::VectorXd::Zero(num+1);
  p  = Eigen::VectorXd::Zero(num+1);
  p1 = Eigen::VectorXd::Zero(num+1);

  dm.resize(numprocs);
  for (auto & v : dm) v = Eigen::VectorXd::Zero(num+1);
  
  for (int i=0; i<num; i++) {
    r[i] = rmin + dr*(0.5+i);
    if (logr) r[i] = exp(r[i]);
  }

}

void MakeModel::AddPoint(double R, double mass)
{
  if (logr) R = log(R);
  int indx = (int)( (R - rmin)/dr );
  if (indx<0 || indx>=num) return;
  int nt = 0;
  dm[myid][indx] += mass;
}


std::shared_ptr<SphericalModelTable> MakeModel::Compute()
{
  double mass = 0.0;

  for (int i=1; i<dm.size(); i++) {
    for (int k=0; k<=num; k++) dm[0][k] += dm[i][k];
  }

  for (int k=0; k<num; k++) {

    mass += 0.5*dm[0][k];
    if (k) mass += 0.5*dm[0][k-1];
    
    if (logr)
      d[k] = dm[0][k] /
	(4.0*M_PI/3*(pow(r[k]*exp(0.5*dr), 3.0) - pow(r[k]/exp(0.5*dr), 3.0)));
    else
      d[k] = dm[0][k] /
	(4.0*M_PI/3*(pow(r[k]+0.5*dr, 3.0) - pow(r[k]-0.5*dr, 3.0)));

    m[k] = mass;

    p1[k] = -4.0*M_PI*r[k] * d[k];
  }

  Splsum(r, p1, p);

  for (int k=0; k<num; k++) {
    p[k] = p[num-1] - p[k];
    if (r[k]>0.0) p[k] += -m[k]/r[k];
  }

  
  std::vector<double> R(r.data(), r.data() + r.size());
  std::vector<double> D(d.data(), d.data() + d.size());
  std::vector<double> M(m.data(), m.data() + m.size());
  std::vector<double> P(p.data(), p.data() + p.size());

  return std::make_shared<SphericalModelTable>(R, D, M, P);
}

void MakeModel::WriteModel(string& filename)
{
  ofstream out(filename.c_str());
  if (!out) {
    cerr << "MakeModel::WriteModel: couldn't open <" << filename 
	 << "> to write model\n";
    return;
  }

  out << "# Model generated by MakeModel\n#\n";
  out << num << std::endl;

  out.precision(10);
  out.setf(ios::scientific);

  for (int n=0; n<num; n++)
    out << setw(20) << r[n]
	<< setw(20) << d[n]
	<< setw(20) << m[n]
	<< setw(20) << p[n]
	<< endl;
}
