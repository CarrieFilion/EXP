#!/usr/bin/python

# -*- coding: utf-8 -*-

"""Program to plot  the ion fractions for CollideIon tests

There are two simple routines here.  The main routine that parses the
input command line and a plotting/parsing routine.

Examples:

	$ python ion_spec run2

"""

import sys, getopt
import copy
import string, re
import numpy as np
import matplotlib.pyplot as pl
import scipy.interpolate as ip


def plot_data(filename, use_time=True, msize=4, tscale=1.0e5):
    """Parse and plot the *.species output files generated by CollideIon 
 
    Parameters:

    filename (string): is the input datafile name

    """

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")


    # Initialize data and header containers
    #
    tabl   = {}
    zmap   = []
    time   = []
    temp   = []
    data   = {}
    labels = []


    # Read and parse the file
    #
    file  = open(filename)
    for line in file:
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            # Make species dicts
            for i in range(2,len(labels)):
                toks = labels[i][1:-1].split(',')
                if len(toks)==2:
                    j    = int(toks[0])
                    if j not in tabl: 
                        tabl[j] = []
                        zmap.append(j)
                    tabl[j].append(i);
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(2,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts are the
                # same (i.e. guard against the occasional badly written
                # output file
                if len(toks) == len(labels):
                    time.append(float(toks[0]))
                    temp.append(float(toks[1]))
                    for i in range(2,len(toks)):
                        if i in data:
                            data[i].append(float(toks[i]))
                        else:
                            data[i] = [float(toks[i])]
                else:
                    print "Bad line: toks=", len(toks), " labels=", len(labels)

    # Use circles
    mk = 'o'

    # Find species fields
    p = re.compile('\(\d+,\d+\)')
    species = []
    for j in range(2,len(labels)):
        if p.match(labels[j]): species.append(j)

    # Fields to plot
    #
    tm = np.array(time)
    tp = np.array(temp)
    
    # Number of species
    #
    nsp  = len(species)
    nplt = 1 + nsp/6
    pn   = 1

    x    = []
    if use_time:
        x = time
        for k in range(0, len(x)): x[k] *= tscale
    else:
        x = temp

    for i in range(nsp):
        for j in range(nplt):
            pn = i + 1 - 6*j
            pl.subplot(2, 3, pn)

            if pn in [4,5,6]:
                if use_time: pl.xlabel('Time (year)')
                else:        pl.xlabel('Temperature (K)')
            if pn in [1,4]: pl.ylabel('Fraction')
            pl.title(labels[i+2])
            pl.plot(x, data[2+i], '-o', markersize=msize)
            if pn==6: pl.show()
    if pn!=6: pl.show()

def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    ptime  = True
    msize  = 4
    tscale = 1.0e5

    header = '[T | "temp" | -m <size> | --msize=<size> | -t <scale> | --timescale=<scale>] <runtag>'
    try:
        opts, args = getopt.getopt(argv,"Tm:t:", ["temp", "msize=", "timescale=", "point"])
    except getopt.GetoptError:
        print sys.argv[0], header
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print sys.argv[0], header
            sys.exit()
        elif opt in ("-T", "--temp"):
            ptime = False
        elif opt in ("-m", "--msize"):
            msize = float(arg)
        elif opt in ("-t", "--timescale"):
            tscale = float(arg)

    suffix = ".species";
    if len(args)>0:
        filename = args[0] + suffix;
    else:
        filename = "run" + suffix;

    plot_data(filename, ptime, msize, tscale)

if __name__ == "__main__":
   main(sys.argv[1:])
