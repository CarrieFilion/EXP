#!/usr/bin/python

"""Script to display the particle collision rates and temperature
profiles using diagnostic output from the CollideIon class in the
UserTreeDSMC module.

Examples:

	$ python ion_energy run2

Plots the energy loss for each species and type of cross section for
the run with runtag <run2> and therefore species file named
<run2.ION_coll>.

"""

import sys, getopt
import copy
import string
import matplotlib.pyplot as pl


def plot_data(filename, tscale):
    """Parse and plot the *.species output files generated by CollideIon 

    Parameters:

    filename (string): is the input datafile name

    tscale (real): convert system time unit to years

    """

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")


    # Initialize data and header containers
    #
    tabl  = {}
    time  = []
    temp  = []
    etot  = []
    ncol  = 9
    ntrl  = 2
    data  = {}

    # Species
    #
    spec  = ['H', 'H+', 'He', 'He+', 'He++']
    for v in spec: data[v] = {}

    # Read and parse the file
    #
    file  = open(filename)
    for line in file:
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            if line.find("W(") >= 0:
                ncol = 13
                ntrl = 3
        if line.find('[1]')>=0:     # Get the column indices
            toks = line.translate(trans).split()
            for i in range(2, len(toks)-1):
                j = int(toks[i][1:-1]) - 1
                tabl[labels[j]] = i
                idx = (i-ntrl) / ncol
                data[spec[idx]][labels[j]] = []
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(2,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts
                # are the same (i.e. guard against the occasional
                # badly written output file
                if len(toks) == len(labels):
                    time.append(float(toks[0]))
                    temp.append(float(toks[1]))
                    etot.append(float(toks[-1]))
                    for i in range(2,len(toks)-1):
                        idx = (i-ntrl) / ncol
                        data[spec[idx]][labels[i]].append(float(toks[i]))
                else:
                    print "toks=", len(toks), " labels=", len(labels)

    # Fields to plot
    #
    ekeys = ['E(ce)', 'E(ci)', 'E(ff)', 'E(rr)']                
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    c = 0
    for v in spec:
        c += 1
        pl.subplot(2, 3, c)
        pl.xlabel('Temperature')
        pl.ylabel('Energy fraction')
        pl.title(v)
        # pl.ylim((1.0e-6, 1))
        for k in range(0, 4):
            y = copy.deepcopy(data[v][ekeys[k]])
            for j in range(0, len(y)): 
                y[j] /= etot[j]
                y[j] += 1.0e-10
            pl.semilogy(temp, y, '*', label=elabs[k], markersize=10)
        if c==5: 
            legend = pl.legend(loc='best',borderpad=0,labelspacing=0)
            legend.get_title().set_fontsize('6')
            pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.subplot(2, 3, 6)
    pl.xlabel('Time (year)')
    pl.ylabel('Temperature')
    y = time
    for i in range(0, len(y)): y[i] *= tscale
    pl.plot(y, temp, '*')
    pl.get_current_fig_manager().full_screen_toggle()
    pl.show()

    minE = 1.0e+40
    maxE = 0.0
    for i in range(0, len(ekeys)):
        for v in spec:
            minE = min(minE, min(data[v][ekeys[i]]))
            maxE = max(maxE, max(data[v][ekeys[i]]))

    c = 0
    for i in range(0, len(ekeys)):
        c += 1
        pl.subplot(2, 2, c)
        pl.xlabel('Temperature')
        pl.ylabel('Energy')
        pl.title(elabs[i])
        pl.ylim((minE*0.9, maxE*1.1))
        for v in spec:
            pl.plot(temp, data[v][ekeys[i]], '*', label=v, markersize=10)
        if c == 4: 
            pl.legend(loc='best',borderpad=0,labelspacing=0)
            legend.get_title().set_fontsize('6')
            pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.get_current_fig_manager().full_screen_toggle()
    pl.show()


def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    tscale = 1.0e5
    try:
        opts, args = getopt.getopt(argv,"hd:s:t:", ["deg=", "smooth=", "timescale="])
    except getopt.GetoptError:
        print sys.argv[0], '[-t <timescale> | --timescale=<timescale>] <runtag>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print sys.argv[0], '[-t <timescale> | --timescale=<timescale>] <runtag>'
            sys.exit()
        elif opt in ("-t", "--timescale"):
            tscale = float(arg)

    suffix = ".ION_coll";
    if len(args)>0:
        filename = args[0] + suffix;
    else:
        filename = "run" + suffix;

    plot_data(filename, tscale)

if __name__ == "__main__":
   main(sys.argv[1:])
