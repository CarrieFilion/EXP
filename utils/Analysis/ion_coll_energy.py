#!/usr/bin/python

# -*- Python -*-
# -*- coding: utf-8 -*-

"""Program to display the particle collision counts for each type
using diagnostic output from the CollideIon class in the
UserTreeDSMC module.

There are two simple routines here.  The main routine that parses the
input command line and a plotting/parsing routine.

Examples:

	$ python ion_coll_energy -m 10 run2

Plots the collision count types for each ion type.

"""

import sys, argparse
import copy
import string
import numpy as np
import matplotlib.pyplot as pl
import scipy.interpolate as ip


def plot_data(filename, msz, logY, dot, tscale, useTime, fullScreen):
    """Parse and plot the *.ION_coll output files generated by
    CollideIon

    Parameters:

    filename (string): is the input datafile name

    msz (numeric): marker size

    logY(bool): use logarithmic y axis

    dot (bool): if True, markers set to dots

    """

    # Marker type
    #
    if dot: mk = '.'
    else:   mk = '*'

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")

    # Initialize data and header containers
    #
    tabl  = {}
    time  = []
    temp  = []
    etot  = []
    ncol  = 9
    lead  = 2
    tail  = 2
    data  = {}

    # Species
    #
    spec5   = ['H', 'H+', 'He', 'He+', 'He++']
    spec1   = ['All']
    spec    = []
    nstanza = 0

    # Read and parse the file
    #
    file  = open(filename + ".ION_coll")
    for line in file:
        if line.find('Species')>=0:
            if line.find('(65535, 65535)')>=0:
                spec = spec1
            else:
                spec = spec5

            nstanza = len(spec)
            for v in spec: data[v] = {}
            
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            nlabs  = len(labels)
            tindx  = labels.index('Elost')
            tail   = nlabs - tindx
            if 'Disp' in labels: lead = 3
            ncol   = (tindx-lead)/nstanza
        if line.find('[1]')>=0:     # Get the column indices
            toks = line.translate(trans).split()
            for i in range(lead, len(toks)-tail):
                j = int(toks[i][1:-1]) - 1
                tabl[labels[j]] = i
                idx = (i-lead) / ncol
                data[spec[idx]][labels[j]] = []
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(lead,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts are the
                # same (i.e. guard against the occasional badly written
                # output file
                if len(toks) == len(labels):
                    time.append(float(toks[0]))
                    temp.append(float(toks[1]))
                    etot.append(float(toks[-1]))
                    for i in range(lead,len(toks)-tail):
                        idx = (i-lead) / ncol
                        data[spec[idx]][labels[i]].append(float(toks[i]))
                else:
                    print "toks=", len(toks), " labels=", len(labels)

    # Fields to plot
    #
    ekeys = ['E(ce)', 'E(ci)', 'E(ff)', 'E(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    xaxis = []
    if useTime:
        for i in range(len(time)): time[i] *= tscale
        xaxis = time
    else:
        xaxis = temp

    for v in spec:
        pl.subplot(1, 1, 1)
        cnt = 0
        Plot = False
        for k in range(4):
            if logY:
                x = []
                y = []          # Look for non-zero entries
                for i in range(len(data[v][ekeys[k]])):
                    if data[v][ekeys[k]][i] > 0.0:
                        x.append(xaxis[i])
                        y.append(data[v][ekeys[k]][i])
                if len(x)>0:
                    Plot = True
                    pl.semilogy(x, y, '-', marker=mk,
                                label=elabs[k], markersize=msz)
            else:
                Plot = True
                pl.plot(xaxis, data[v][ekeys[k]], '-', marker=mk,
                        label=elabs[k], markersize=msz)
        if Plot:
            if useTime:
                pl.xlabel('Time')
            else:
                pl.xlabel('Temperature')
            pl.ylabel('Energy')
            pl.title(v)
            leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
            leg.get_title().set_fontsize('6')
            pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')
            if fullScreen: pl.get_current_fig_manager().full_screen_toggle()
            pl.show()


def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    parser = argparse.ArgumentParser(description='Read DSMC ION_coll file and plot weight, count, and energy quantities')
    parser.add_argument('-p', '--point',   default=False, action='store_true', help='Plot points')
    parser.add_argument('-l', '--log',     default=False, action='store_true', help='Logarithmic vertical scale')
    parser.add_argument('-t', '--time',    default=False, action='store_true', help='Use time rather than temperature for x-axis')
    parser.add_argument('-f', '--full',    default=False, action='store_true', help='Switch plotting window to full screen')
    parser.add_argument('--tscale',        default=1.0, type=float,            help='Conversion between system time and years')
    parser.add_argument('-m', '--size',    default=4, type=int,                help='Marker size')
    parser.add_argument('tag',             nargs='*',                          help='File to process')

    args = parser.parse_args()

    plot_data(args.tag[0], args.size, args.log, args.point, args.tscale, args.time, args.full)

if __name__ == "__main__":
   main(sys.argv[1:])
