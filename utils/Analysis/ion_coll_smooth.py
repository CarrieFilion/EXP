#!/usr/bin/python

# -*- Python -*-
# -*- coding: utf-8 -*-

"""Program to display the particle collision counts for each type
using diagnostic output from the CollideIon class in the
UserTreeDSMC module.

There are two simple routines here.  The main routine that parses the
input command line and a plotting/parsing routine.

Examples:

	$ python ion_coll_number -d 2 run2

Plots the collision count types for each ion type.

"""

import sys, getopt
import copy
import string
import numpy as np
import matplotlib.pyplot as pl
import scipy.interpolate as ip

def savitzky_golay(y, window_size, order, deriv=0, rate=1):
    """Smooth (and optionally differentiate) data with a Savitzky-Golay filter.
    The Savitzky-Golay filter removes high frequency noise from data.
    It has the advantage of preserving the original shape and
    features of the signal better than other types of filtering
    approaches, such as moving averages techniques.
    Parameters
    ----------
    y : array_like, shape (N,)
        the values of the time history of the signal.
    window_size : int
        the length of the window. Must be an odd integer number.
    order : int
        the order of the polynomial used in the filtering.
        Must be less then `window_size` - 1.
    deriv: int
        the order of the derivative to compute (default = 0 means only smoothing)
    Returns
    -------
    ys : ndarray, shape (N)
        the smoothed signal (or it's n-th derivative).
    Notes
    -----
    The Savitzky-Golay is a type of low-pass filter, particularly
    suited for smoothing noisy data. The main idea behind this
    approach is to make for each point a least-square fit with a
    polynomial of high order over a odd-sized window centered at
    the point.
    Examples
    --------
    t = np.linspace(-4, 4, 500)
    y = np.exp( -t**2 ) + np.random.normal(0, 0.05, t.shape)
    ysg = savitzky_golay(y, window_size=31, order=4)
    import matplotlib.pyplot as plt
    plt.plot(t, y, label='Noisy signal')
    plt.plot(t, np.exp(-t**2), 'k', lw=1.5, label='Original signal')
    plt.plot(t, ysg, 'r', label='Filtered signal')
    plt.legend()
    plt.show()
    References
    ----------
    .. [1] A. Savitzky, M. J. E. Golay, Smoothing and Differentiation of
       Data by Simplified Least Squares Procedures. Analytical
       Chemistry, 1964, 36 (8), pp 1627-1639.
    .. [2] Numerical Recipes 3rd Edition: The Art of Scientific Computing
       W.H. Press, S.A. Teukolsky, W.T. Vetterling, B.P. Flannery
       Cambridge University Press ISBN-13: 9780521880688
    """
    import numpy as np
    from math import factorial

    try:
        window_size = np.abs(np.int(window_size))
        order = np.abs(np.int(order))
    except ValueError, msg:
        raise ValueError("window_size and order have to be of type int")
    if window_size % 2 != 1 or window_size < 1:
        raise TypeError("window_size size must be a positive odd number")
    if window_size < order + 2:
        raise TypeError("window_size is too small for the polynomials order")
    order_range = range(order+1)
    half_window = (window_size -1) // 2
    # precompute coefficients
    b = np.mat([[k**i for i in order_range] for k in range(-half_window, half_window+1)])
    m = np.linalg.pinv(b).A[deriv] * rate**deriv * factorial(deriv)
    # pad the signal at the extremes with
    # values taken from the signal itself
    firstvals = y[0] - np.abs( y[1:half_window+1][::-1] - y[0] )
    lastvals = y[-1] + np.abs(y[-half_window-1:-1][::-1] - y[-1])
    y = np.concatenate((firstvals, y, lastvals))
    return np.convolve( m[::-1], y, mode='valid')

def smooth_data(x, y, delta, window, order):
    """Smooth data into bins and apply rbf"""
    xmin = min(x)
    xmax = max(x)
    xx = np.arange(xmin-0.5*delta, xmax+0.5*delta, delta) + 0.5*delta
    yy = np.arange(xmin-0.5*delta, xmax+0.5*delta, delta) * 0.0
    nn = np.arange(xmin-0.5*delta, xmax+0.5*delta, delta) * 0.0
    for i in range(0, len(x)):
        indx = int((x[i] - xmin + 0.5*delta)/delta)
        indx = max(indx, 0)
        indx = min(indx, len(xx)-1)
        yy[indx] += y[i]
        nn[indx] += 1
        
    for i in range(0, len(xx)):
        if nn[i]>0: yy[i] /= nn[i]
        
    ys  = savitzky_golay(yy, window, order)

    return xx, yy, ys
        
        
def plot_data(nametag, window, order, msz, dot, scr, useTime):
    """Parse and plot the *.ION_coll output files generated by
    CollideIon

    Parameters:

    nametag (string): is the run id prefix

    dot (bool): if True, markers set to dots

    """

    # Construct file name
    #
    filename = nametag + ".ION_coll"

    # Marker type
    #
    if dot: mk = '.'
    else:   mk = 'o'

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")

    # Initialize data and header containers
    #
    tabl  = {}
    time  = []
    temp  = []
    etot  = []
    ncol  = 9
    head  = 2
    tail  = 2
    data  = {}

    # Species
    #
    spec  = ['H', 'H+', 'He', 'He+', 'He++']
    for v in spec: data[v] = {}

    # Read and parse the file
    #
    file  = open(filename)
    for line in file:
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            if line.find("W(") >= 0: 
                ncol = 13
            if line.find("N(nn)") >= 0: 
                ncol = 16
            if line.find("EratC") >= 0 or line.find("Efrac") >= 0: 
                tail = 12
        if line.find('[1]')>=0:     # Get the column indices
            toks = line.translate(trans).split()
            for i in range(head, len(toks)-tail):
                j = int(toks[i][1:-1]) - 1
                tabl[labels[j]] = i
                idx = (i-head) / ncol
                data[spec[idx]][labels[j]] = []
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(head,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts are the
                # same (i.e. guard against the occasional badly written
                # output file
                if len(toks) == len(labels):
                    time.append(float(toks[0]))
                    temp.append(float(toks[1]))
                    etot.append(float(toks[-1]))
                    for i in range(head,len(toks)-tail):
                        idx = (i-head) / ncol
                        data[spec[idx]][labels[i]].append(float(toks[i]))
                else:
                    print "toks=", len(toks), " labels=", len(labels)

    # Fields to plot
    #
    ekeys = ['N(ce)', 'N(ci)', 'N(ff)', 'N(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    xaxis = []
    if useTime:
        xaxis = time
    else:
        xaxis = temp

    tmin = min(xaxis)
    tmax = max(xaxis)
    dt   = (tmax - tmin)/100.0
    xt   = np.arange(tmin, tmax, dt)

    icnt = 0
    for k in range(0, 4):
        icnt += 1
        pl.subplot(2, 2, icnt)
        if useTime: pl.xlabel('Time')
        else:       pl.xlabel('Temperature')
        pl.ylabel('Counts')
        for v in spec:
            xi, yi, ys = smooth_data(xaxis, np.array(data[v][ekeys[k]]),
                                     1000, window, order)
            pl.plot(xi, yi, mk, markersize=msz, mfc='none', mec='k')
            if len(xi) == len(ys):
                pl.plot(xi, ys, '-', lw=2, label=v)
        pl.title(elabs[k])
        if icnt==4:
            leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
            if leg is not None:
                leg.get_title().set_fontsize('6')
                pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.get_current_fig_manager().full_screen_toggle()
    pl.savefig("%s_%s.png" % (nametag, "allcount"))
    if scr: pl.show()
    else:   pl.close()

    # Fields to plot
    #
    ekeys = ['W(ce)', 'W(ci)', 'W(ff)', 'W(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    icnt = 0
    for k in range(0, 4):
        icnt += 1
        pl.subplot(2, 2, icnt)
        if useTime: pl.xlabel('Time')
        else:       pl.xlabel('Temperature')
        pl.ylabel('Weights')
        # pl.ylim((0, 30))
        for v in spec:
            xi, yi, ys = smooth_data(xaxis, data[v][ekeys[k]],
                                     1000, window, order)
            if max(yi) > 0.0:
                yi[yi==0.0] = min(yi[np.nonzero(yi)]) * 0.1
                ys[ys==0.0] = min(ys[np.nonzero(ys)]) * 0.1
                pl.semilogy(xi, yi, mk, markersize=msz, mfc='None', mec='k')
                if len(xi) == len(ys):
                    pl.semilogy(xi, ys, '-', lw=2, label=v)
                # pl.plot(xi, yi, mk, markersize=msz, mfc='None', mec='k')
                # pl.plot(xi, ys, '-', lw=2, label=v)
        pl.title(elabs[k])
        if icnt==4:
            leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
            if leg is not None:
                leg.get_title().set_fontsize('6')
                pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.get_current_fig_manager().full_screen_toggle()
    pl.savefig("%s_%s.png" % (nametag, "allweight"))
    if scr: pl.show()
    else:   pl.close()

    # Fields to plot
    #
    ekeys = ['N(ce)', 'N(ci)', 'N(ff)', 'N(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    for v in spec:
        pl.subplot(1, 1, 1)
        if useTime: pl.xlabel('Time')
        else:       pl.xlabel('Temperature')
        pl.ylabel('Counts')
        cnt = 0
        for k in range(4):
            x = []
            y = []
            for j in range(0, len(xaxis)):
                if data[v][ekeys[k]][j]>0.0:
                    x.append(xaxis[j])
                    y.append(data[v][ekeys[k]][j])
            if len(x)>0:
                xi, yi, ys = smooth_data(x, y, 1000, window, order)
                if len(xi) == len(ys):
                    pl.plot(xi, yi, mk, markersize=msz, mfc='None', mec='k')
                    pl.plot(xi, ys, '-', lw=2, label=elabs[k])
                    cnt += 1
        if cnt==0: continue
        pl.title(v)
        leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
        leg.get_title().set_fontsize('6')
        pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')
        pl.get_current_fig_manager().full_screen_toggle()
        pl.savefig("%s_%s.png" % (nametag, v + "_count"))
        if scr: pl.show()
        else:   pl.close()

    # Fields to plot
    #
    ekeys = ['W(ce)', 'W(ci)', 'W(ff)', 'W(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    for v in spec:
        pl.subplot(1, 1, 1)
        if useTime: pl.xlabel('Time')
        else:       pl.xlabel('Temperature')
        pl.ylabel('Weights')
        cnt = 0
        for k in range(4):
            x = []
            y = []
            for j in range(0, len(xaxis)):
                if data[v][ekeys[k]][j]>0.0:
                    x.append(xaxis[j])
                    y.append(data[v][ekeys[k]][j])
            if len(x)>0:
                xi, yi, ys = smooth_data(x, y, 1000, window, order)
                if len(xi) == len(ys):
                    pl.semilogy(xi, yi, mk, markersize=msz, mfc='None', mec='k')
                    pl.semilogy(xi, ys, '-', lw=2, label=elabs[k])
                    cnt += 1
        if cnt==0: continue
        pl.title(v)
        leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
        leg.get_title().set_fontsize('6')
        pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')
        pl.get_current_fig_manager().full_screen_toggle()
        pl.savefig("%s_%s.png" % (nametag, v + "_weight"))
        if scr: pl.show()
        else:   pl.close()

    # Fields to plot
    #
    ekeys = ['E(ce)', 'E(ci)', 'E(ff)', 'E(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    for v in spec:
        pl.subplot(1, 1, 1)
        if useTime: pl.xlabel('Time')
        else:       pl.xlabel('Temperature')
        pl.ylabel('Energy')
        cnt = 0
        for k in range(4):
            xi, yi, ys = smooth_data(xaxis, data[v][ekeys[k]],
                                     1000, window, order)
            pl.plot(xi, yi, mk, markersize=msz, mfc='None', mec='k')
            if len(xi) == len(ys):
                pl.plot(xi, ys, '-', lw=2, label=elabs[k])
        pl.title(v)
        leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
        if leg is not None:
            leg.get_title().set_fontsize('6')
            pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')
        pl.get_current_fig_manager().full_screen_toggle()
        pl.savefig("%s_%s.png" % (nametag, v + "_energy"))
        if scr: pl.show()
        else:   pl.close()


def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    dot    = False
    scr    = False
    time   = False
    msz    = 4
    window = 17
    order  = 2

    hlpstr = '[-w <size> | --window <size> | -o <order> | --order <order> | -p | --point | -m <size> | --msize=<size> | -s | --screen] <runtag>'

    try:
        opts, args = getopt.getopt(argv,"hw:o:m:pst", ["window=", "order=", "msize=", "point", "screen", "time"])
    except getopt.GetoptError:
        print 'Syntax Error'
        print sys.argv[0], hlpstr
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print sys.argv[0], hlpstr
            sys.exit()
        elif opt in ("-w", "--window"):
            window = int(arg)
        elif opt in ("-o", "--order"):
            order = int(arg)
        elif opt in ("-p", "--point"):
            dot = True
        elif opt in ("-s", "--screen"):
            scr = True
        elif opt in ("-t", "--time"):
            time = True
        elif opt in ("-m", "--msize"):
            msz = int(arg)

    nametag = "run"
    if len(args)>0: nametag = args[0]

    plot_data(nametag, window, order, msz, dot, scr, time)

if __name__ == "__main__":
   main(sys.argv[1:])
