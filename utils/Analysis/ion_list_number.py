#!/usr/bin/python

# -*- Python -*-
# -*- coding: utf-8 -*-

"""Program to display the particle collision counts for each type
using diagnostic output from the CollideIon class in the
UserTreeDSMC module.

There are two simple routines here.  The main routine that parses the
input command line and a plotting/parsing routine.

Examples:

	$ python ion_split_number run2

Print count types for each ion type.

"""

import sys, getopt
import copy
import string
import numpy as np
import matplotlib.pyplot as pl
import scipy.interpolate as ip


def split_data(filename):
    """Parse the *.ION_coll output files generated by CollideIon

    Parameters:

    filename (string): is the input datafile name

    """

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")

    # Initialize data and header containers
    #
    tabl  = {}
    time  = []
    temp  = []
    etot  = []
    ncol  = 9
    head  = 2
    tail  = 2
    data  = {}

    # Species
    #
    spec  = ['H', 'H+', 'He', 'He+', 'He++']
    for v in spec: data[v] = {}

    # Read and parse the file
    #
    file  = open(filename)
    for line in file:
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            if line.find("W(") >= 0: 
                ncol = 13
            if line.find("N(nn)") >= 0:
                ncol = 16
            if line.find("EratC") >= 0 or line.find("Efrac") >= 0:
                tail = 12
        if line.find('[1]')>=0:     # Get the column indices
            toks = line.translate(trans).split()
            for i in range(head, len(toks)-tail):
                j = int(toks[i][1:-1]) - 1
                tabl[labels[j]] = i
                idx = (i-head) / ncol
                data[spec[idx]][labels[j]] = []
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(2,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts are the
                # same (i.e. guard against the occasional badly written
                # output file
                if len(toks) == len(labels):
                    time.append(float(toks[0]))
                    temp.append(float(toks[1]))
                    etot.append(float(toks[-1]))
                    for i in range(head,len(toks)-tail):
                        idx = (i-head) / ncol
                        data[spec[idx]][labels[i]].append(float(toks[i]))
                else:
                    print "toks=", len(toks), " labels=", len(labels)

    # Fields to print
    #
    ekeys = ['N(ce)', 'N(ci)', 'N(ff)', 'N(rr)']
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    if ncol==16:
        ekeys = ['N(nn)', 'N(ne)', 'N(ie)', 'N(ce)', 'N(ci)', 'N(ff)', 'N(rr)']
        elabs = ['neut-neut', 'neut-elec', 'ion-elec', 'collide', 'ionize', 'free-free', 'recomb']

    for v in spec:
        print
        print '{:*^94}'.format(" [" + v + "] ")
        print
        print "{0:>14s} {1:>14s}".format("Time", "Temp"),
        for e in ekeys:
            print "{:>8s}".format(e),
        print
        print "{0:>14s} {0:>14s}".format("-------"),
        for e in ekeys:
            print "{:>8s}".format("-------"),
        print
        sums = {}
        for e in ekeys: sums[e] = 0
        for k in range(len(time)):
            print "{0:>14.2e} {1:>14.2e}".format(time[k], temp[k]),
            for e in ekeys:
                print "{:>8.0f}".format(data[v][e][k]),
                sums[e] += data[v][e][k]
            print
        print "{0:>14s} {0:>14s}".format("-------"),
        for e in ekeys:
            print "{:>8s}".format("-------"),
        print
        print "{0:>14s} {1:>14s}".format("", "Totals"),
        for e in ekeys:
            print "{:>8.0f}".format(sums[e]),
        print

def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    try:
        opts, args = getopt.getopt(argv, "h", ["help"])
    except getopt.GetoptError:
        print 'Syntax Error'
        print sys.argv[0], '[-h | --help] <runtag>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print sys.argv[0], '[-h | --help] <runtag>'

    suffix = ".ION_coll"
    if len(args)>0:
        filename = args[0] + suffix;
    else:
        filename = "run" + suffix;

    split_data(filename)

if __name__ == "__main__":
   main(sys.argv[1:])
