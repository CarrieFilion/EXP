#!/usr/bin/python


# -*- coding: utf-8 -*-

"""Program to display the particle collision rates and temperature
profiles using diagnostic output from the CollideIon class in the
UserTreeDSMC module.

There are two simple routines here.  The main routine that parses the
input command line and a plotting/parsing routine.

Examples:

	$ python ion_collide -d 2 run2

Plots the energy-loss rates for each collision type and the
temperature and cooling profile for the run with runtag <run2> and
therefore species file named <run2.ION_coll> using polynomical
fitting with degree 2.  To use a spline fit, specify the value of the
smoothing parameter, i.e.

	$ python ion_collide -s 10000000 run2

"""

import sys, getopt
import copy
import string, re
import numpy as np
import matplotlib.pyplot as pl
import scipy.interpolate as ip


def plot_data(filename, degree, smooth, tscale=1.0e5, logE=False):
    """Parse and plot the *.ION_coll output files generated by
    CollideIon

    Parameters:

    filename (string): is the input datafile name

    degree (int): is the degree of the polynomial fitting function.
    If degree = 0, a spline fit is used

    smooth (real): is the smoothing parameter for the spline fit.

    tscale (real): years per system time unit

    logE (bool): use logarithmic energy scaling if True

    """

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")


    # Initialize data and header containers
    #
    tabl  = {}
    time  = []
    temp  = []
    etot  = []
    ncol  = 9
    lead  = 2
    tail  = 2
    data  = {}

    # Species
    #
    spec  = ['H', 'H+', 'He', 'He+', 'He++']
    for v in spec: data[v] = {}

    # Read and parse the file
    #
    file  = open(filename)
    for line in file:
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            labels = line.translate(trans).split()
            nlabs  = len(labels)
            tindx  = labels.index('Elost')
            tail   = nlabs - tindx
            if 'Disp' in labels: lead = 3
            ncol   = (tindx-lead)/5
        if line.find('[1]')>=0:     # Get the column indices
            toks = line.translate(trans).split()
            for i in range(lead, len(toks)-tail):
                j = int(toks[i][1:-1]) - 1
                tabl[labels[j]] = i
                idx = (i-lead) / ncol
                data[spec[idx]][labels[j]] = []
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(lead,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts are the
                # same (i.e. guard against the occasional badly written
                # output file
                if len(toks) == len(labels):
                    time.append(float(toks[0]))
                    temp.append(float(toks[1]))
                    etot.append(float(toks[-1]))
                    for i in range(lead,len(toks)-tail):
                        idx = (i-lead) / ncol
                        data[spec[idx]][labels[i]].append(float(toks[i]))
                else:
                    print "toks=", len(toks), " labels=", len(labels)

    # Find species
    specs = []
    p = re.compile('\(\d+,\d+\)');
    for i in range(2,len(labels)):
        if p.match(labels[i]): specs.append(i)

    # Fields to plot
    #
    ekeys = ['E(ce)', 'E(ci)', 'E(ff)', 'E(rr)']                
    elabs = ['collide', 'ionize', 'free-free', 'recomb']

    tm = np.array(time)
    tp = np.array(temp)
    if degree>0:
        pf = np.polyfit(tm, tp, deg=degree)
        yf = np.polyval(pf, tm)
        pd = np.polyder(pf, m=1)
        zf = np.polyval(pd, tm)
    else:
        tck = ip.splrep(tm, tp, s=smooth)
        yf  = ip.splev(tm, tck)
        zf  = ip.splev(tm, tck, der=1)

    pl.subplot(2, 2, 1)
    pl.xlabel('Time (year)')
    pl.ylabel('Temperature')
    y = time
    for i in range(0, len(y)): y[i] *= tscale
    pl.plot(y, temp, '*', label='simulation')
    if degree>0:
        pl.plot(y, yf, '-', label='poly fit')
    else:
        pl.plot(y, yf, '-', label='spline fit')
    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.subplot(2, 2, 2)
    pl.xlabel('Temperature')
    pl.ylabel('Slope')
    if degree>0:
        pl.plot(yf, -zf, '-', label='poly fit')
    else:
        pl.plot(yf, -zf, '-', label='spline fit')
    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.subplot(2, 2, 3)
    pl.xlabel('Time (year)')
    pl.ylabel('Energy')
    pl.title(elabs[0])
    for v in spec:
        if logE:
            pl.semilogy(time, data[v][ekeys[0]], '*', label=v, markersize=10)
        else:
            pl.plot(time, data[v][ekeys[0]], '*', label=v, markersize=10)

    pl.subplot(2, 2, 4)
    pl.xlabel('Temperature (K)')
    pl.ylabel('Energy')
    pl.title(elabs[0])
    for v in spec:
        if logE:
            pl.semilogy(temp, data[v][ekeys[0]], '*', label=v, markersize=10)
        else:
            pl.plot(temp, data[v][ekeys[0]], '*', label=v, markersize=10)
    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.get_current_fig_manager().full_screen_toggle()
    pl.show()

def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    degree = 2
    smooth = 1
    tscale = 1e5
    logE   = False

    try:
        opts, args = getopt.getopt(argv,"hd:s:t:l", ["deg=", "smooth=", "timescale=", "logE"])
    except getopt.GetoptError:
        print sys.argv[0], '[-d <degree> | --deg=<degree> | -s <smooth> | --smooth=<smooth> | -t <timescale> | --timescale=<timescale> | -l | --logE] <runtag>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print sys.argv[0], '[-d <degree> | --deg=<degree> | -s <smooth> | --smooth=<smooth> | -t <timescale> | --timescale=<timescale> | -l | --logE] <runtag>'
            sys.exit()
        elif opt in ("-d", "--deg"):
            degree = int(arg)
        elif opt in ("-s", "--smooth"):
            smooth = float(arg)
            degree = 0
        elif opt in ("-t", "--timescale"):
            tscale = float(arg)
        elif opt in ("-l", "--logE"):
            logE = True

    suffix = ".ION_coll";
    if len(args)>0:
        filename = args[0] + suffix;
    else:
        filename = "run" + suffix;

    plot_data(filename, degree, smooth, tscale, logE)

if __name__ == "__main__":
   main(sys.argv[1:])
