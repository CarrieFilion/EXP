#!/usr/bin/python

# -*- coding: utf-8 -*-

"""Program to compute the ion fractions for CollideIon tests

There are two simple routines here.  The main routine that parses the
input command line and a plotting/parsing routine.

Examples:

	$ python ion_frac_ch -d 2 run2

Plots the temperature and ion fractions for the run with runtag
<run2> and therefore species file named <run2.species> using
polynomical fitting with degree 2.  To use a spline fit, specify the value of the smoothing parameter, i.e.

	$ python ion_frac_ch -s 10000000 run2

"""

import sys, getopt
import copy
import string, re
import numpy as np
import matplotlib.pyplot as pl
import scipy.interpolate as ip
import chianti.core as ch


def plot_data(filename, degree, smooth, msize, dens, tmax=-1.0, tscale=1.0e5, logY=False, dot=False):
    """Parse and plot the *.species output files generated by CollideIon 
 
    Parameters:

    filename (string): is the input datafile name

    degree (int): is the degree of the polynomial fitting function.
    If degree = 0, a spline fit is used

    smooth (real): is the smoothing parameter for the spline fit.

    """

    # Translation table to convert vertical bars and comments to spaces
    #
    trans = string.maketrans("#|", "  ")


    # Initialize data and header containers
    #
    tabl  = {}
    zmap  = []
    time  = []
    temp  = []
    data  = {}


    # Read and parse the file
    #
    file  = open(filename)
    for line in file:
        if line.find('Time')>=0:    # Get the labels
            next = True
            labels = line.translate(trans).split()
            # Make species dicts
            for i in range(2,len(labels)):
                toks = labels[i][1:-1].split(',')
                if len(toks)==2:
                    j    = int(toks[0])
                    if j not in tabl: 
                        tabl[j] = []
                        zmap.append(j)
                    tabl[j].append(i);
        if line.find('#')<0:        # Read the data lines
            toks = line.translate(trans).split()
            allZ = True             # Skip lines with zeros only
            for i in range(2,len(toks)):
                if float(toks[i])>0.0: 
                    allZ = False
                    break
            if not allZ:            
                # A non-zero line . . .  Make sure field counts are the
                # same (i.e. guard against the occasional badly written
                # output file
                if len(toks) == len(labels):
                    if tmax<0.0 or tmax > float(toks[0]):
                        time.append(float(toks[0]))
                        temp.append(float(toks[1]))
                        for i in range(2,len(toks)):
                            if i in data:
                                data[i].append(float(toks[i]))
                            else:
                                data[i] = [float(toks[i])]
                else:
                    print "Bad line: toks=", len(toks), " labels=", len(labels)

    mk = '*'
    if dot: mk = '.'

    # Find species fields
    p = re.compile('\(\d+,\d+\)')
    species = []
    for j in range(2,len(labels)):
        if p.match(labels[j]): species.append(j)

    # Fields to plot
    #
    tm = np.array(time)
    tp = np.array(temp)
    if degree>0:
        pf = np.polyfit(tm, tp, deg=degree)
        yf = np.polyval(pf, tm)
        pd = np.polyder(pf, m=1)
        zf = np.polyval(pd, tm)
    else:
        tck = ip.splrep(tm, tp, s=smooth)
        yf  = ip.splev(tm, tck)
        zf  = ip.splev(tm, tck, der=1)

    pl.subplot(2, 2, 1)
    pl.xlabel('Time (year)')
    pl.ylabel('Temperature (K)')
    y = time
    for i in range(0, len(y)): y[i] *= tscale
    pl.plot(y, temp, mk, label='simulation', markersize=msize)
    if degree>0:
        pl.plot(y, yf, '-', label='poly fit', linewidth=3)
    else:
        pl.plot(y, yf, '-', label='spline fit', linewidth=3)
    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    Tmin = np.log10(yf.min())
    Tmax = np.log10(yf.max())
    delT = (Tmax - Tmin - 0.000001)/2000.0
    chT  = 10.0**np.arange(Tmin, Tmax, delT)

    rl    = ch.radLoss(chT, dens, minAbund=0.01)
    abund = rl.AbundanceAll['abundance']
    T_Ch  = rl.RadLoss['temperature']
    R_Ch  = rl.RadLoss['rate']
    k_B   = 1.3806504e-16
    yr5   = 365.25*24*3600*1e5
    R_Ch *= yr5/k_B * dens**2
    elems = {}
    for n in zmap:
        elems[n] = ch.ioneq(n)
        elems[n].calculate(chT)

    pl.subplot(2, 2, 2)
    pl.xlabel('Temperature (K)')
    pl.ylabel('Slope')
    if degree>0:
        pl.plot(yf, -zf, '-', label='poly fit')
    else:
        pl.plot(yf, -zf, '-', label='spline fit')
    pl.plot(T_Ch, R_Ch, '-', label='LTE')

    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.subplot(2, 2, 3)
    pl.xlabel('Temperature (K)')
    pl.ylabel('Fraction')
    for j in data.keys():
        for k in range(0, len(data[j])): data[j][k] += 1.0e-8

    for i in data.keys():
        if i not in species: continue
        if logY:
            pl.semilogy(temp, data[i], mk, label=labels[i], markersize=msize)
        else:
            pl.plot(temp, data[i], mk, label=labels[i], markersize=msize)
    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.subplot(2, 2, 4)
    pl.xlabel('Temperature (K)')
    pl.ylabel('Normalized fraction')
    # Compute norm
    norm = {}
    for n in zmap:
        for k in range(0, len(temp)):
            sum = 0.0
            for j in tabl[n]: 
                data[j][k] -= 1.0e-8;
                sum += data[j][k]
            for j in tabl[n]: 
                if sum>0.0: data[j][k] /= sum
                data[j][k] += 1.0e-8
    for i in data.keys():
        if i not in species: continue
        if logY:
            pl.semilogy(temp, data[i], mk, label=labels[i], markersize=msize)
        else:
            pl.plot(temp, data[i], mk, label=labels[i], markersize=msize)

    for n in zmap:
        for i in range(0, len(elems[n].Ioneq)):
            lab = 'CH(%d, %d)' % (n, i+1);
            if logY:
                pl.semilogy(elems[n].Temperature, elems[n].Ioneq[i], '-', label=lab)
            else:
                pl.plot(elems[n].Temperature, elems[n].Ioneq[i], '-', label=lab)

    leg = pl.legend(loc='best',borderpad=0,labelspacing=0)
    leg.get_title().set_fontsize('6')
    pl.setp(pl.gca().get_legend().get_texts(), fontsize='12')

    pl.get_current_fig_manager().full_screen_toggle()
    pl.show()

def main(argv):
    """ Parse the command line and call the parsing and plotting routine """

    dens   = 0.05
    degree = 6
    smooth = 1
    msize  = 4
    tmax   = -1.0
    tscale = 1.0e5
    logY   = False
    dot    = False

    try:
        opts, args = getopt.getopt(argv,"hD:d:s:m:t:T:lp", ["density=", "deg=", "smooth=", "msize=", "timescale=", "tmax=", "log", "point"])
    except getopt.GetoptError:
        print sys.argv[0], '[-D <density> | --density=<density> | -d <degree> | --deg=<degree> | -s <smooth> | --smooth=<smooth> | -m <size> | --msize=<size> | -l | --log | -p | --point | -t tscale | --timescale=<tscale> |  -T tmax | --tmax=<tmax>] <runtag>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print sys.argv[0], '[-D <density> | --density=<density> | -d <degree> | --deg=<degree> | -s <smooth> | --smooth=<smooth> | -m <size> | --msize=<size> | -l | --log | -p | --point  | -t tscale | --timescale=<tscale> | -T tmax | --tmax=<tmax>] <runtag>'
            sys.exit()
        elif opt in ("-D", "--density"):
            dens = float(arg)
        elif opt in ("-d", "--deg"):
            degree = int(arg)
        elif opt in ("-s", "--smooth"):
            smooth = float(arg)
            degree = 0
        elif opt in ("-m", "--msize"):
            msize = float(arg)
        elif opt in ("-T", "--tmax"):
            tmax = float(arg)
        elif opt in ("-t", "--timescale"):
            tscale = float(arg)
        elif opt in ("-l", "--log"):
            logY = True
        elif opt in ("-p", "--point"):
            dot = True

    suffix = ".species";
    if len(args)>0:
        filename = args[0] + suffix;
    else:
        filename = "run" + suffix;

    plot_data(filename, degree, smooth, msize, dens, tmax, tscale, logY, dot)

if __name__ == "__main__":
   main(sys.argv[1:])
