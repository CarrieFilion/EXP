#!/usr/bin/python

# -*- coding: utf-8 -*-

import os, sys, getopt
import numpy as np
import matplotlib.pylab as plt

def plot_data(runtags, time):
	"""Plot the species files for the desired run tags

	Parameters:

	runtags (list of strings): input runs
	
	time (bool): use time rather than temperature for abscissa

	"""

	xi = 1
	if time: xi = 0

	db = {}		       # Dictionary to contain all of the data

	for lab in runtags:
		data = []
		name = lab + '.species'
		if os.path.isfile(name):
			file = open(name)
		else:
			print "No such file: ", name
			exit()

		for line in file:
			if line.find('#')<0: 
				data.append([float(v) for v in line.split()])
		# Pack up the data
		db[lab] = np.array(data).transpose()


	#
	# First plot
	#
	for l in db:
		plt.plot(db[l][0], db[l][1], '-', label="ion,"+l, 
			 marker="1", linewidth=3, markersize=10)
		plt.plot(db[l][0], db[l][10], '-', label="elec,"+l, 
			 marker="2", linewidth=3, markersize=10)

	plt.legend()
	plt.xlabel("Time")
	plt.ylabel("Temp")
	plt.show()

	#
	# Second plot
	#
	for l in db:
		plt.plot(db[l][xi], db[l][6], '-', label="He++,"+l, 
			 marker="1", linewidth=3, markersize=10)
		plt.plot(db[l][xi], db[l][5], '-', label="He+,"+l, 
			 marker="2", linewidth=3, markersize=10)
		plt.plot(db[l][xi], db[l][4], '-', label="He,"+l, 
			 marker="3", linewidth=3, markersize=10)
	plt.legend()
	if xi: plt.xlabel("Temp")
	else:  plt.xlabel("Time")
	plt.show()

	#
	# Third plot
	#
	for l in db:
		plt.plot(db[l][xi], db[l][3], '-', label="H+,"+l, 
			 marker="1", linewidth=3, markersize=10)
		plt.plot(db[l][xi], db[l][2], '-', label="H,"+l, 
			 marker="2", linewidth=3, markersize=10)
	plt.legend()
	if xi: plt.xlabel("Temp")
	else:  plt.xlabel("Time")
	plt.show()


def main(argv):
	""" Parse the command line and call the parsing and plotting routine """

	time = False

	hstr = '[-h | --help | -T | --Time] <runtag> [ <runtag> . . . ]'

	try:
		opts, args = getopt.getopt(argv,"hT", ["help","Time"])
	except getopt.GetoptError:
		print sys.argv[0], hstr
		sys.exit(2)

	for opt, arg in opts:
		if opt == ("-h", "--help"):
			print sys.argv[0], hstr
			sys.exit()
		elif opt in ("-T", "--Time"):
			time = True

	plot_data(args, time)

if __name__ == "__main__":
	main(sys.argv[1:])
